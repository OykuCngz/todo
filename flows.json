[{"id":"2ff629767b586cfe","type":"tab","label":"Flow 1","disabled":false,"info":"","env":[]},{"id":"tab1","type":"tab","label":"todos","disabled":false,"info":""},{"id":"6276be3bae445313","type":"http in","z":"2ff629767b586cfe","name":"","url":"/","method":"get","upload":false,"skipBodyParsing":false,"swaggerDoc":"","x":90,"y":100,"wires":[["74f99efc2b23cadf"]]},{"id":"fc64863bb139683c","type":"http response","z":"2ff629767b586cfe","name":"","statusCode":"","headers":{},"x":450,"y":100,"wires":[]},{"id":"74f99efc2b23cadf","type":"template","z":"2ff629767b586cfe","name":"","field":"payload","fieldType":"msg","format":"html","syntax":"mustache","template":"<!doctype html>\n<html lang=\"tr\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n  <title>Yapılacaklar Listesi</title>\n  <link rel=\"stylesheet\" href=\"/vendor/bootstrap/bootstrap.min.css\">\n  <style>\n    .truncate{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}\n    .table-fixed{table-layout:fixed}\n  </style>\n</head>\n<body>\n  <div class=\"container py-4\">\n    <!-- ÜST: giriş + butonlar -->\n    <div class=\"row mb-3\">\n      <div class=\"col-md-8 offset-md-2\">\n        <div class=\"input-group input-group-lg\">\n          <input id=\"newTitle\" type=\"text\" class=\"form-control\" placeholder=\"Yoğurt al... Ekmek al...\" aria-label=\"Yeni iş\">\n          <button id=\"btnClear\" class=\"btn btn-outline-secondary\" type=\"button\">Temizle</button>\n          <button id=\"btnAdd\" class=\"btn btn-primary\" type=\"button\">Ekle</button>\n        </div>\n      </div>\n    </div>\n\n    <!-- LİSTE KUTUSU -->\n    <div class=\"row\">\n      <div class=\"col-md-8 offset-md-2\">\n        <div class=\"border rounded-3 shadow-sm overflow-hidden\">\n          <div class=\"bg-dark text-white fw-bold px-3 py-2\">İş</div>\n\n          <div class=\"table-responsive\">\n            <table class=\"table table-hover m-0 table-fixed\">\n              <!-- Kolon genişliklerini sabitle -->\n              <colgroup>\n                <col style=\"width:70%\">\n                <col style=\"width:30%\">\n              </colgroup>\n              <!-- Görünmeyen thead: tarayıcıya 2 kolon olduğunu bildirir -->\n              <thead class=\"visually-hidden\">\n                <tr><th>İş</th><th>İşlem</th></tr>\n              </thead>\n              <tbody id=\"todoBody\">\n                <tr><td colspan=\"2\" class=\"text-center text-muted\">Henüz kayıt yok</td></tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <script src=\"/vendor/bootstrap/bootstrap.bundle.min.js\"></script>\n  <script>\n    const $ = (s,r=document)=>r.querySelector(s);\n    const esc = s => String(s ?? '').replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#39;'}[m]));\n    const api = '/todos';\n    const bodyEl = $('#todoBody');\n\n    async function load(){ const r = await fetch(api); render(await r.json()); }\n    function render(list){\n      if(!list.length){\n        bodyEl.innerHTML = `<tr><td colspan=\"2\" class=\"text-center text-muted\">Henüz kayıt yok</td></tr>`;\n        return;\n      }\n      bodyEl.innerHTML = list.map(t=>{\n        const title = esc((t.title ?? t.text ?? t.name ?? '').toString());\n        const btns = t.completed\n          ? `<div class=\"btn-group\" role=\"group\">\n               <button type=\"button\" class=\"btn btn-warning btn-sm\" data-act=\"open\">Aç</button>\n               <button type=\"button\" class=\"btn btn-danger  btn-sm\" data-act=\"del\">Sil</button>\n             </div>`\n          : `<div class=\"btn-group\" role=\"group\">\n               <button type=\"button\" class=\"btn btn-info     btn-sm text-white\" data-act=\"edit\">Düzenle</button>\n               <button type=\"button\" class=\"btn btn-secondary btn-sm\"            data-act=\"remind\">Hatırlatıcı</button>\n               <button type=\"button\" class=\"btn btn-success  btn-sm\"            data-act=\"done\">Tamamla</button>\n               <button type=\"button\" class=\"btn btn-danger   btn-sm\"            data-act=\"del\">Sil</button>\n             </div>`;\n        return `\n          <tr data-id=\"${t._id}\">\n            <td class=\"truncate\" title=\"${title}\">${title || '<i class=\"text-muted\">başlık yok</i>'}</td>\n            <td class=\"text-end\">${btns}</td>\n          </tr>`;\n      }).join('');\n    }\n\n    async function add(title){\n      if(!title.trim()) return;\n      await fetch(api,{method:'POST',headers:{'Content-Type':'application/json'},body: JSON.stringify({ title:title.trim() })});\n      $('#newTitle').value=''; load();\n    }\n    async function del(id){ await fetch(`${api}/${id}`,{method:'DELETE'}); load(); }\n    async function toggle(id,to){ await fetch(`${api}/${id}`,{method:'PUT',headers:{'Content-Type':'application/json'},body: JSON.stringify({completed:!!to})}); load(); }\n    async function edit(id){\n      const r=await fetch(api); const list=await r.json(); const t=list.find(x=>x._id===id); if(!t) return;\n      const nv=prompt('Yeni başlık:', t.title ?? t.text ?? t.name ?? ''); if(nv && nv.trim()){\n        await fetch(`${api}/${id}`,{method:'PUT',headers:{'Content-Type':'application/json'},body: JSON.stringify({ title:nv.trim() })});\n        load();\n      }\n    }\n\n    $('#btnAdd').onclick = ()=> add($('#newTitle').value);\n    $('#newTitle').addEventListener('keydown',e=>{ if(e.key==='Enter'){ e.preventDefault(); add($('#newTitle').value); }});\n    $('#btnClear').onclick = ()=>{\n    $('#newTitle').value = '';\n    $('#newTitle').focus();\n    };\n\n    bodyEl.addEventListener('click', async (e)=>{\n      const btn=e.target.closest('button'); if(!btn) return;\n      const tr=e.target.closest('tr'); const id=tr?.dataset.id; const act=btn.dataset.act;\n      if(act==='del') del(id);\n      if(act==='done') toggle(id,true);\n      if(act==='open') toggle(id,false);\n      if(act==='edit') edit(id);\n      if(act==='remind'){\n        const m=parseInt(prompt('Kaç dakika sonra hatırlatayım?','10'),10);\n        if(!isNaN(m)&&m>0){ setTimeout(()=>alert('⏰ Hatırlatıcı'), m*60*1000); btn.textContent='Ayarlı'; btn.disabled=true; }\n      }\n    });\n\n    load();\n  </script>\n</body>\n</html>\n","output":"str","x":260,"y":100,"wires":[["fc64863bb139683c"]]},{"id":"hget","type":"http in","z":"tab1","name":"GET /todos","url":"/todos","method":"get","upload":false,"swaggerDoc":"","x":120,"y":80,"wires":[["fn_get"]]},{"id":"fn_get","type":"function","z":"tab1","name":"list","func":"let todos = flow.get('todos') || [];\nmsg.payload = todos;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":330,"y":80,"wires":[["resp_json"]]},{"id":"resp_json","type":"http response","z":"tab1","name":"json","statusCode":"","headers":{"Content-Type":"application/json"},"x":540,"y":80,"wires":[]},{"id":"hpost","type":"http in","z":"tab1","name":"POST /todos","url":"/todos","method":"post","upload":false,"swaggerDoc":"","x":120,"y":140,"wires":[["json_post"]]},{"id":"json_post","type":"json","z":"tab1","name":"parse json","property":"payload","action":"","pretty":false,"x":330,"y":140,"wires":[["fn_post"]]},{"id":"fn_post","type":"function","z":"tab1","name":"create","func":"// Sağlam POST: hem JSON hem form verisini destekler, farklı alan adlarını toplar\nlet todos = flow.get('todos') || [];\n\n// Gövdeyi yakala ve gerekiyorsa JSON parse et\nlet b = msg.payload;\nif (typeof b === 'string') {\n  try { b = JSON.parse(b); } catch (e) { b = {}; }\n}\nb = b || {};\n\n// Olası alan adları: title, text, name, task, value, (query param)\nconst title =\n  [b.title, b.text, b.name, b.task, b.value,\n   msg?.req?.query?.title].find(v => typeof v === 'string' && v.trim()) || '';\n\nconst id = Date.now().toString(36) + Math.random().toString(36).slice(2, 6);\nconst now = new Date().toISOString();\n\nconst item = {\n  _id: id,\n  title: title,\n  description: (b.description || '').toString(),\n  categories: Array.isArray(b.categories) ? b.categories\n             : (b.categories ? [b.categories] : []),\n  dueAt: b.dueAt || null,\n  completed: !!b.completed,\n  createdAt: now,\n  updatedAt: now\n};\n\ntodos.unshift(item);\nflow.set('todos', todos);\n\nmsg.statusCode = 201;\nmsg.payload = item;\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":540,"y":140,"wires":[["resp_json"]]},{"id":"hput","type":"http in","z":"tab1","name":"PUT /todos/:id","url":"/todos/:id","method":"put","upload":false,"swaggerDoc":"","x":130,"y":200,"wires":[["json_put"]]},{"id":"json_put","type":"json","z":"tab1","name":"parse json","property":"payload","action":"","pretty":false,"x":330,"y":200,"wires":[["fn_put"]]},{"id":"fn_put","type":"function","z":"tab1","name":"update","func":"let todos = flow.get('todos') || [];\nconst id = msg.req.params.id;\nconst b = msg.payload || {};\nconst i = todos.findIndex(t=>t._id===id);\nif(i===-1){msg.statusCode=404;msg.payload={error:'not found'};return msg;}\nconst updated={...todos[i],...b,updatedAt:new Date().toISOString()};\ntodos[i]=updated;\nflow.set('todos', todos);\nmsg.payload=updated;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":540,"y":200,"wires":[["resp_json"]]},{"id":"hdel","type":"http in","z":"tab1","name":"DELETE /todos/:id","url":"/todos/:id","method":"delete","upload":false,"swaggerDoc":"","x":140,"y":260,"wires":[["fn_del"]]},{"id":"fn_del","type":"function","z":"tab1","name":"remove","func":"let todos = flow.get('todos') || [];\nconst id = msg.req.params.id;\nconst i = todos.findIndex(t=>t._id===id);\nif(i===-1){msg.statusCode=404;msg.payload={error:'not found'};return msg;}\ntodos.splice(i,1);\nflow.set('todos', todos);\nmsg.statusCode=204;\nmsg.payload='';\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":540,"y":260,"wires":[["resp_empty"]]},{"id":"resp_empty","type":"http response","z":"tab1","name":"empty 204","statusCode":"","headers":{},"x":740,"y":260,"wires":[]}]